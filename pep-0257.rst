===========================
PEP-257: Docstring 規約
===========================


オリジナルのヘッダ
==================

PEP: 257
Title: Docstring Conventions
Version: $Revision: 1.1.1.1 $
Last-Modified: $Date: 2003/03/19 01:15:10 $
Author: David Goodger <goodger@users.sourceforge.net>,
        Guido van Rossum <guido@python.org>
Discussions-To: doc-sig@python.org
Status: Active
Type: Informational
Content-Type: text/x-rst
Created: 29-May-2001
Post-History: 13-Jun-2001


概要
====

この PEP ドキュメントでは、様々な Python ドキュメンテーション文字列 (docstring) について、その意味と取り決めを記述しています。


PEP の位置付け
==============

この PEP の目的は、docstring (ドキュメンテーション文字列、以降 docstring) の高レベル構造を標準化することにあります。
つまり、どんな情報を含めるべきか、そしてどのように (docstring のマークアップの範囲内で) docstring を書くべきかの指針です。
この PEP で記述されているのは単なる取り決めであって、規則や文法ではありません。

    「万人向けの規約があれば、維持しやすさ (maintainability)、わかりやすさ (clarity)、一貫性 (consistency) 、そしていいプログラムのお作法を身につける役に立つ。
    意に反して従わなきゃいけないものじゃない。
    それこそ、 "Python" ってやつさ。」

    -- Tim Peters on comp.lang.python, 2001-06-16

    ※ Python には、「心に囁く霊的存在」という意味がある。

規約にに違反しても、多少 docstring の見栄えがわるくなる程度かもしれません。
しかし、一部のソフトウェア (Docutils_ の docstring を処理するシステム [1]_ [2]_ ) は、 docstring が規約に準拠して書かれていることを前提としているので、取り決めに従っていればベストの結果を得られるはずです。


仕様
======

docstring とは何か?
--------------------

docstring とは、モジュール、関数、クラス、メソッドといったオブジェクトについて、その定義部分の最初の行に書く文字列リテラルのデータです。
定義した docstring は、そのオブジェクトの特殊属性 ``__doc__`` になります。

原則として、モジュールには全て docstring を定義すべきです。
また、モジュールで公開している関数やクラスもまた、全て docstring を定義すべきです。
公開のメソッド (``__init__`` コンストラクタも含みます) にも、 docstring を持たせてください。
パッケージの場合、パッケージディレクトリの ``__init__.py`` ファイルの docstring でドキュメントを記述してもかまいません。

Python コード中で、上記以外の場所に、独立した文字列リテラルを置いた場合にも、ドキュメントになります。
Python のバイトコードコンパイラはこのリテラルをを認識しないので、実行時には、オブジェクトの属性としてアクセスできません (``__doc__`` に結びつきません)。
ただし、以下の、2 種類の特殊な docstring は、ソフトウェアツールが抽出することがあります:

1. モジュール、クラス、 ``__init__`` メソッドで、何らかの変数に代入を行った直後に書くと、「属性(attribute) docstring」という docstring になります。

2. 他の docstring の直後に書くと、「補足 (additional) docstring」になります。

属性 docstring や補足 docstring の詳細は、:PEP:258, "Docutils Design Specification" [2]_ を参照してください。

XXX Mention docstrings of 2.2 properties.

一貫性のために、 docstring を囲う引用符には、常に ``"""三連二重引用符"""`` を用いてください。
docstring 中にバックスラッシュを使う場合には、 ``r"""生文字列の三連二重引用符"""`` を使ってください。
Unicode  docstring には、 ``u"""Unicode 三連二重引用符"""`` を使ってください。


docstring には、単行形式と複数行形式の2形式があります。

.. _one-line docstrings:

一行形式 docstring 
------------------

一行形式の用途はとても明確です。例のように、一行に収めたいときです::

    def kos_root():
        """Return the pathname of the KOS root directory."""
        global _kos_root
        if _kos_root: return _kos_root
        ...

注意:

- 文字列が 1 行内に収まっていても、三連二重引用符を使います。
  後で docstring を複数行に展開しやすいです。

- 閉じ側の引用符は開き側の引用符と同じ行になければなりません。
  一行形式を見やすくするためです。

- docstring の前にも後ろにも空行を入れてはなりません。

- docstring の文章は、ピリオドで終えます。関数やメソッドの動作を命令形 （「これを実行せよ」, 「あれを返せ」） を書き、詳しい説明は書きません。例えば、「... であるパス名を返す」などと書いてはなりません。

  .. note::
     訳注: 原文では、 "(something) Returns ... " のような主語省略の叙文でなく、 "Return ..." のような動詞を活用しない命令文を推奨しています。日本語では、命令形の書き方はなじまないので、主語を省略した「...する」「...を返す」で問題ないと思われます。

- 一行形式の docstring に、関数やメソッドのパラメタ（イントロスペクションで判るような情報）を入れた「シグネチャ」を書いてはなりません。以下はダメな例です::

      def function(a, b):
          """function(a, b) -> list"""

  このような docstring の書き方がふさわしいのは、イントロスペクションが効かない、Cで書かれた関数う (組み込み関数など) だけです。
  とはいえ、 *戻り値* の性質はイントロスペクションで判らないので、必要に応じて書いてください。望ましい docstring は以下の通りです::

      def function(a, b):
          """Do X and return a list."""

  (もちろん、"Do X" は意味のある記述に置き換えてくださいね！)

.. _multi-line docstrings:

複数行形式の docstring 
----------------------

複数行の docstring は、最初に一行形式の docstring と同じまとめの行、次に空行、そして詳細な説明からなります。
最初の行は、自動インデクス生成ツールが使うことがあるので、内容が一行におさまっていること、残りの部分と空行で分けて書かれていることが必要です。
まとめの行は、開始の引用符と同じ行に書いても、その次の行に書いてもかまいません。
docstring 全体のインデントは、最初の行のクオートの位置です (後の例を参照してください)。

クラスの説明の docstring は (一行形式も、複数行形式も) 全て、前と後ろに空白行を挿入してください。
一般的なルールとして、クラスの各々のメソッドは互いに空白行 1 行で分けて書くことになっています。なので、クラスの docstringは最初のメソッドから空白行 1 行離して書かねばなりません。
そして、対称性を持たせるために、クラスのヘッダ部分と docstring の間にも空白行を 1 行入れてください。
関数やメソッドの docstring には、こうした決まりは基本的にありません。
例外は関数やメソッドの本体が幾つかのセクションからなっていて、空白行で区切られている場合です -- この場合、docstring も一つのセクションとして扱い、その前に空白行を一行入れてください。

スクリプト (スタンドアロンのプログラム) の docstring は "使用法" メッセージとして使うことができ、スクリプトが間違った引数や引数なしで起動された場合 (あるいは "ヘルプ" を表す "-h" オプションで起動された場合) に出力されます。
この docstring はスクリプトの機能やコマンドラインの構文、環境変数、そしてファイルについて説明していなければなりません。
使い方のメッセージは (数画面分いっぱいにわたるぐらい) かなり詳細なものとすべきです。
初めてスクリプトを使用するユーザが、正しくコマンドを利用できると同時に、熟練したユーザが、全てのオプションと引数を、素早く完全に参照できるくらいでなければなりません。

モジュールの docstring は、通常、モジュールが提供するクラス、例外、関数 (そしてその他のオブジェクト) を列挙し、それぞれの説明は 1 行にまとめてください。
(このまとめは、オブジェクトごとのまとめの docstring よりも少ない情報なのが普通です。)
パッケージの docstring (すなわち、 package の ``__init__.py`` モジュールの docstring) もまた、package の提供するモジュールやサブパッケージを列挙するのが望ましいです。

関数やメソッドの docstring は、その動作についてまとめ、引数や戻り値、副作用、発行される例外、関数やメソッドを呼び出せる状況の制限を (あれば) 説明します。
オプションの引数も示すべきです。
キーワード引数がインタフェースの一部となっているかどうかも説明してください。

クラスの docstring では、その動作について概説し、公開するメソッドやインスタンス変数について列挙します。
クラスがサブクラス化を想定している場合、またサブクラスのための追加インタフェースを持っている場合、そのインタフェースは (docstring 内で) 別に列挙しなければなりません。
クラスのコンストラクタは ``__init__`` メソッドで記述し、個々のメソッドについてはそれぞれの docstring で記述すべきです。

あるクラスが別のクラスをサブクラス化しており、その動作のほとんどが上位クラスから継承したものである場合、サブクラスの docstring ではそのことについて触れ、差分について概説しなければなりません。
あるサブクラスのメソッドが上位クラスのメソッドを置き換えており、上位クラスメソッドを呼ばない場合の記述には、動詞 "上書き (override)" を使い、サブクラスのメソッドで (サブクラス独自の動作に加えて) 上位クラスのメソッドを呼び出している場合には、動詞 "拡張 (extend)" を使ってください。

関数やメソッドの引数を一行内に大文字で記述する Emacs 様式は *使わないでください。*
Python は大小文字の区別を行うため、大文字で記述した引数の名前をキーワード引数として扱ってしまう可能性があるので、docstring では正しい引数名を記述しなければなりません。
最良の方法は個々の引数を別々の行に列挙することです。
例えば::

    def complex(real=0.0, imag=0.0):
        """Form a complex number.

        Keyword arguments:
        real -- the real part (default 0.0)
        imag -- the imaginary part (default 0.0)

        """
        if imag == 0.0 and real == 0.0: return complex_zero
        ...

The BDFL [3]_ では、複数行の docstring における最終段落と、docstringを閉じる引用符との間に空行を 1 行挿入し、最後は閉じ引用符だけの行にするよう推奨しています。
こうすることで、Emacs の ``fill-paragraph`` コマンドを使うことができます。


docstring のインデントをどうするか
----------------------------------

docstring 処理ツールは、docstring の先頭行以降の全ての空行でない行の中で最小のインデント量に等しいだけのインデント空白を、docstring の 2 行目以降から剥ぎ取ります。
docstring の最初の行におけるインデント dostring 最初の行にある (すなわち最初の改行までの) 何らかのインデントには意味がなく、取り去られます。docstring 内の以降の行における相対的なインデントは残されます。
空白行は docstring の先頭から末尾まで取り去られるはずです。

言葉よりもコードの方が明確なので、以下にそのアルゴリズムを実装したものを示します::

    def trim(docstring):
        if not docstring:
            return ''
        # タブをスペースに変換 (普通の Python のルールで)
        # して各行に分割:
        lines = docstring.expandtabs().splitlines()
        # 最小のインデント幅を決める (最初の行は調べない):
        indent = sys.maxint
        for line in lines[1:]:
            stripped = line.lstrip()
            if stripped:
                indent = min(indent, len(line) - len(stripped))
        # インデントを除去する (最初の行だけ特別扱い):
        trimmed = [lines[0].strip()]
        if indent < sys.maxint:
            for line in lines[1:]:
                trimmed.append(line[indent:].rstrip())
        # 末尾や先頭の空行を取り去る:
        while trimmed and not trimmed[-1]:
            trimmed.pop()
        while trimmed and not trimmed[0]:
            trimmed.pop(0)
        # 一つの文字列として返す:
        return '\n'.join(trimmed)

以下の例の docstring は 2 つの改行文字を含むので、結果として 3 行になります。
最初と最後の行は空行です::

    def foo():
        """
        This is the second line of the docstring.
        """

実例を挙げてみましょう::

    >>> print repr(foo.__doc__)
    '\n    This is the second line of the docstring.\n    '
    >>> foo.__doc__.splitlines()
    ['', '    This is the second line of the docstring.', '    ']
    >>> trim(foo.__doc__)
    'This is the second line of the docstring.'

切り詰めによって、二つの docstring は同じになります::

    def foo():
        """A multi-line
        docstring.
        """

    def bar():
        """
        A multi-line
        docstring.
        """


参考文献および補足
==================

.. [1] PEP 256, Docstring Processing System Framework, Goodger
   (http://www.python.org/peps/pep-0256.html)

.. [2] PEP 258, Docutils Design Specification, Goodger
   (http://www.python.org/peps/pep-0258.html)

.. [3] Guido van Rossum, Python's creator and Benevolent Dictator For
   Life.

.. _Docutils: http://docutils.sourceforge.net/

.. _Python Style Guide:
   http://www.python.org/doc/essays/styleguide.html

.. _Doc-SIG: http://www.python.org/sigs/doc-sig/


著作権
======

パブリックドメインのドキュメントです。


謝辞
====

「仕様」の部分のテキストはほとんど Guido van Rossum による `Python Style Guide`_ エッセイからそのまま引用したものです。

このドキュメントは Python Doc-SIG_ のアーカイブからいくつかアイデアを拝借しています。
以前のそして現在の全ての SIG メンバに感謝します。



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   fill-column: 70
   sentence-end-double-space: t
   End:

